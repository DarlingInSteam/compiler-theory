//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MapParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MapParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		NEWLINE=10, MAP=11, FB=12, LB=13, COMMA=14, EQUAL=15, NEW=16, HASHMAP=17, 
		LP=18, RP=19, SEMICOLON=20, IDENTIFIER=21, WS=22;
	public const int
		RULE_prog = 0, RULE_map = 1, RULE_fb1 = 2, RULE_datatype1 = 3, RULE_comma1 = 4, 
		RULE_datatype2 = 5, RULE_lb1 = 6, RULE_name = 7, RULE_ravno = 8, RULE_new = 9, 
		RULE_hashmap = 10, RULE_fb2 = 11, RULE_datatype3 = 12, RULE_comma2 = 13, 
		RULE_datatype4 = 14, RULE_lb2 = 15, RULE_lp = 16, RULE_rp = 17, RULE_semicolon = 18, 
		RULE_dataType = 19;
	public static readonly string[] ruleNames = {
		"prog", "map", "fb1", "datatype1", "comma1", "datatype2", "lb1", "name", 
		"ravno", "new", "hashmap", "fb2", "datatype3", "comma2", "datatype4", 
		"lb2", "lp", "rp", "semicolon", "dataType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Int'", "'String'", "'Bool'", "'Float'", "'Byte'", "'Short'", "'Long'", 
		"'Boolean'", "'Char'", null, "'Map'", "'<'", "'>'", "','", "'='", "'new'", 
		"'HashMap'", "'('", "')'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "NEWLINE", 
		"MAP", "FB", "LB", "COMMA", "EQUAL", "NEW", "HASHMAP", "LP", "RP", "SEMICOLON", 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MapParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MapParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MapParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MapParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapContext[] map() {
			return GetRuleContexts<MapContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map(int i) {
			return GetRuleContext<MapContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MapParserParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MapParserParser.NEWLINE, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 40;
				map();
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 41;
					Match(NEWLINE);
					}
				}

				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MAP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(MapParserParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fb1Context fb1() {
			return GetRuleContext<Fb1Context>(0);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 2, RULE_map);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(MAP);
			State = 49;
			fb1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FB() { return GetToken(MapParserParser.FB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Datatype1Context datatype1() {
			return GetRuleContext<Datatype1Context>(0);
		}
		public Fb1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterFb1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitFb1(this);
		}
	}

	[RuleVersion(0)]
	public Fb1Context fb1() {
		Fb1Context _localctx = new Fb1Context(Context, State);
		EnterRule(_localctx, 4, RULE_fb1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(FB);
			State = 52;
			datatype1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comma1Context comma1() {
			return GetRuleContext<Comma1Context>(0);
		}
		public Datatype1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterDatatype1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitDatatype1(this);
		}
	}

	[RuleVersion(0)]
	public Datatype1Context datatype1() {
		Datatype1Context _localctx = new Datatype1Context(Context, State);
		EnterRule(_localctx, 6, RULE_datatype1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			dataType();
			State = 55;
			comma1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comma1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MapParserParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Datatype2Context datatype2() {
			return GetRuleContext<Datatype2Context>(0);
		}
		public Comma1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comma1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterComma1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitComma1(this);
		}
	}

	[RuleVersion(0)]
	public Comma1Context comma1() {
		Comma1Context _localctx = new Comma1Context(Context, State);
		EnterRule(_localctx, 8, RULE_comma1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(COMMA);
			State = 58;
			datatype2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lb1Context lb1() {
			return GetRuleContext<Lb1Context>(0);
		}
		public Datatype2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterDatatype2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitDatatype2(this);
		}
	}

	[RuleVersion(0)]
	public Datatype2Context datatype2() {
		Datatype2Context _localctx = new Datatype2Context(Context, State);
		EnterRule(_localctx, 10, RULE_datatype2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			dataType();
			State = 61;
			lb1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lb1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(MapParserParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Lb1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lb1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterLb1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitLb1(this);
		}
	}

	[RuleVersion(0)]
	public Lb1Context lb1() {
		Lb1Context _localctx = new Lb1Context(Context, State);
		EnterRule(_localctx, 12, RULE_lb1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(LB);
			State = 64;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MapParserParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RavnoContext ravno() {
			return GetRuleContext<RavnoContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 14, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(IDENTIFIER);
			State = 67;
			ravno();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RavnoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MapParserParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewContext @new() {
			return GetRuleContext<NewContext>(0);
		}
		public RavnoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ravno; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterRavno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitRavno(this);
		}
	}

	[RuleVersion(0)]
	public RavnoContext ravno() {
		RavnoContext _localctx = new RavnoContext(Context, State);
		EnterRule(_localctx, 16, RULE_ravno);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(EQUAL);
			State = 70;
			@new();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MapParserParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HashmapContext hashmap() {
			return GetRuleContext<HashmapContext>(0);
		}
		public NewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterNew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitNew(this);
		}
	}

	[RuleVersion(0)]
	public NewContext @new() {
		NewContext _localctx = new NewContext(Context, State);
		EnterRule(_localctx, 18, RULE_new);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(NEW);
			State = 73;
			hashmap();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashmapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHMAP() { return GetToken(MapParserParser.HASHMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fb2Context fb2() {
			return GetRuleContext<Fb2Context>(0);
		}
		public HashmapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hashmap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterHashmap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitHashmap(this);
		}
	}

	[RuleVersion(0)]
	public HashmapContext hashmap() {
		HashmapContext _localctx = new HashmapContext(Context, State);
		EnterRule(_localctx, 20, RULE_hashmap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(HASHMAP);
			State = 76;
			fb2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FB() { return GetToken(MapParserParser.FB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Datatype3Context datatype3() {
			return GetRuleContext<Datatype3Context>(0);
		}
		public Fb2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterFb2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitFb2(this);
		}
	}

	[RuleVersion(0)]
	public Fb2Context fb2() {
		Fb2Context _localctx = new Fb2Context(Context, State);
		EnterRule(_localctx, 22, RULE_fb2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(FB);
			State = 79;
			datatype3();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comma2Context comma2() {
			return GetRuleContext<Comma2Context>(0);
		}
		public Datatype3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterDatatype3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitDatatype3(this);
		}
	}

	[RuleVersion(0)]
	public Datatype3Context datatype3() {
		Datatype3Context _localctx = new Datatype3Context(Context, State);
		EnterRule(_localctx, 24, RULE_datatype3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			dataType();
			State = 82;
			comma2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comma2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MapParserParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Datatype4Context datatype4() {
			return GetRuleContext<Datatype4Context>(0);
		}
		public Comma2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comma2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterComma2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitComma2(this);
		}
	}

	[RuleVersion(0)]
	public Comma2Context comma2() {
		Comma2Context _localctx = new Comma2Context(Context, State);
		EnterRule(_localctx, 26, RULE_comma2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(COMMA);
			State = 85;
			datatype4();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype4Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lb2Context lb2() {
			return GetRuleContext<Lb2Context>(0);
		}
		public Datatype4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype4; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterDatatype4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitDatatype4(this);
		}
	}

	[RuleVersion(0)]
	public Datatype4Context datatype4() {
		Datatype4Context _localctx = new Datatype4Context(Context, State);
		EnterRule(_localctx, 28, RULE_datatype4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			dataType();
			State = 88;
			lb2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lb2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(MapParserParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LpContext lp() {
			return GetRuleContext<LpContext>(0);
		}
		public Lb2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lb2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterLb2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitLb2(this);
		}
	}

	[RuleVersion(0)]
	public Lb2Context lb2() {
		Lb2Context _localctx = new Lb2Context(Context, State);
		EnterRule(_localctx, 30, RULE_lb2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(LB);
			State = 91;
			lp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(MapParserParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp() {
			return GetRuleContext<RpContext>(0);
		}
		public LpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterLp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitLp(this);
		}
	}

	[RuleVersion(0)]
	public LpContext lp() {
		LpContext _localctx = new LpContext(Context, State);
		EnterRule(_localctx, 32, RULE_lp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(LP);
			State = 94;
			rp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(MapParserParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SemicolonContext semicolon() {
			return GetRuleContext<SemicolonContext>(0);
		}
		public RpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterRp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitRp(this);
		}
	}

	[RuleVersion(0)]
	public RpContext rp() {
		RpContext _localctx = new RpContext(Context, State);
		EnterRule(_localctx, 34, RULE_rp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(RP);
			State = 97;
			semicolon();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemicolonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MapParserParser.SEMICOLON, 0); }
		public SemicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterSemicolon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitSemicolon(this);
		}
	}

	[RuleVersion(0)]
	public SemicolonContext semicolon() {
		SemicolonContext _localctx = new SemicolonContext(Context, State);
		EnterRule(_localctx, 36, RULE_semicolon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapParserListener typedListener = listener as IMapParserListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_dataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1022L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,104,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,3,0,43,8,0,4,
		0,45,8,0,11,0,12,0,46,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,
		1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
		1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,
		1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,0,0,20,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,1,1,0,1,9,85,
		0,44,1,0,0,0,2,48,1,0,0,0,4,51,1,0,0,0,6,54,1,0,0,0,8,57,1,0,0,0,10,60,
		1,0,0,0,12,63,1,0,0,0,14,66,1,0,0,0,16,69,1,0,0,0,18,72,1,0,0,0,20,75,
		1,0,0,0,22,78,1,0,0,0,24,81,1,0,0,0,26,84,1,0,0,0,28,87,1,0,0,0,30,90,
		1,0,0,0,32,93,1,0,0,0,34,96,1,0,0,0,36,99,1,0,0,0,38,101,1,0,0,0,40,42,
		3,2,1,0,41,43,5,10,0,0,42,41,1,0,0,0,42,43,1,0,0,0,43,45,1,0,0,0,44,40,
		1,0,0,0,45,46,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,1,1,0,0,0,48,49,5,
		11,0,0,49,50,3,4,2,0,50,3,1,0,0,0,51,52,5,12,0,0,52,53,3,6,3,0,53,5,1,
		0,0,0,54,55,3,38,19,0,55,56,3,8,4,0,56,7,1,0,0,0,57,58,5,14,0,0,58,59,
		3,10,5,0,59,9,1,0,0,0,60,61,3,38,19,0,61,62,3,12,6,0,62,11,1,0,0,0,63,
		64,5,13,0,0,64,65,3,14,7,0,65,13,1,0,0,0,66,67,5,21,0,0,67,68,3,16,8,0,
		68,15,1,0,0,0,69,70,5,15,0,0,70,71,3,18,9,0,71,17,1,0,0,0,72,73,5,16,0,
		0,73,74,3,20,10,0,74,19,1,0,0,0,75,76,5,17,0,0,76,77,3,22,11,0,77,21,1,
		0,0,0,78,79,5,12,0,0,79,80,3,24,12,0,80,23,1,0,0,0,81,82,3,38,19,0,82,
		83,3,26,13,0,83,25,1,0,0,0,84,85,5,14,0,0,85,86,3,28,14,0,86,27,1,0,0,
		0,87,88,3,38,19,0,88,89,3,30,15,0,89,29,1,0,0,0,90,91,5,13,0,0,91,92,3,
		32,16,0,92,31,1,0,0,0,93,94,5,18,0,0,94,95,3,34,17,0,95,33,1,0,0,0,96,
		97,5,19,0,0,97,98,3,36,18,0,98,35,1,0,0,0,99,100,5,20,0,0,100,37,1,0,0,
		0,101,102,7,0,0,0,102,39,1,0,0,0,2,42,46
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
